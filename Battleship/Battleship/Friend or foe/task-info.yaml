type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    public class Main {

        public static void main(String[] args) {
            // Write your code here
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import battleship.Main;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {
        @DynamicTestingMethod
        CheckResult testExample() {

            TestedProgram main = new TestedProgram(Main.class);
            String output = main.start().trim();
            String[][] matrix;

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("Not an empty game field at the start of the game");
            }

            // Filling the first player field
            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("No offer found to give the move to another player");
            }

            output = main.execute("");

            // Filling the second player field

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After filling the first player field, you should request the second player's " +
                    "coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("H2 H6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H2 H6");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("F3 F6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F6");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("H8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H8 F8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("D4 D6").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D4 D6");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("D8 C8");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D8 C8");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("no offer found to give the move to another player");
            }
            output = main.execute("");

            // Players' moves
            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"F3 F7", "A1 D1", "J10 J8", "B9 D9", "I2 J2"});

            output = main.execute("I3");
            if (!output.toLowerCase().contains("missed")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player missed");
            }

            output = main.execute("");
            checkMissing(getFieldMatrix(output), "I3");

            splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields (2 should be)");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"H2 H6", "F3 F6", "H8 F8", "D4 D6", "D8 C8"});

            output = main.execute("C9");
            if (!output.toLowerCase().contains("hit")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player hit the ship");
            }
            main.execute("");

            makeMoveTillTheEnd(main);

            return CheckResult.correct();
        }

        void makeMoveTillTheEnd(TestedProgram main) {

            String[] secondPlayerMoves = {"A1", "B1", "C1", "D1", "B9", "C9", "D9", "F3", "F4", "F5", "F6", "F7", "I2", "J2", "J8", "J9", "J10"};
            String[] firstPlayerMoves = {"D4", "D5", "D6", "C8", "D8", "F3", "F4", "F5", "F6", "F7", "D10", "E10", "F10", "G10", "J1", "J2", "J3"};

            String[][] matrix;
            String output;
            int i;

            for (i = 0; i < 3; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");

            output = main.execute(secondPlayerMoves[i]);
            if (!output.contains("sank")) {
                throw new WrongAnswer("After a ship was sunk you should print \"You sank a ship!\" and ask to press Enter.");
            }
            output = main.execute("");

            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                throw new WrongAnswer("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            checkShot(matrix, "A1");
            checkShot(matrix, "B1");
            checkShot(matrix, "C1");
            checkShot(matrix, "D1");

            for (i = i + 1; i < secondPlayerMoves.length - 1; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");
            output = main.execute(secondPlayerMoves[i]).toLowerCase();

            if (!output.contains("won") || !output.contains("congratulations")) {
                throw new WrongAnswer("If a player has sunk all enemy ships you should print:\n" +
                    "\"You sank the last ship. You won. Congratulations!\"");
            }
        }

        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        void checkShot(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x")) {
                throw new WrongAnswer("Expected hit in \"" + coordinate + "\".");
            }
        }

        boolean checkMissing(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m");
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }

        void findAllShips(String[][] matrix, String[] coordinates) {
            for (String item : coordinates) {
                findShipByCoordinates(matrix, item);
            }
        }
    }
  learner_created: false
- name: src/Main_stage4.txt
  visible: true
  text: |
    package battleship;

    import java.util.*;


    public class Main {
        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            Battle battle = new Battle();
            do  {
                battle.processInput(scanner.nextLine());
            } while (battle.getStatus() != Battle.Status.OVER);
        }
    }


    class Battle {
        private Player p1;
        private Player p2;
        private Status status;
        private final HashMap<String, int[]> map = new HashMap<>(); // coordinate : {row, col} indexes

        Battle() {
            char y = 'A';
            for (int row = 0; row < 10; row++, y++) {
                for (int col = 0; col < 10; col++) { // fill HashMap for coordinates
                    StringBuilder coordinate = new StringBuilder().append(y).append(col + 1);
                    map.put(coordinate.toString(), new int[] {row, col});
                }
            }
            status = Status.START_P1;
            p1 = new Player(); // start player 1
        }

        enum Status {
            START_P1(0),
            //START_P2(0),
            TURN_P1(0),
            //TURN_P2(0),
            OVER(0);

            private int count;

            Status(int count) { this.count = count; }

            void add() { this.count += 1; }

            int getCount() { return this.count; }
        }

        public Status getStatus() { return status; }

        public void processInput(String input) {
            switch (status) {
                case START_P1:
                    char[][] field = p1.getField(); // get player's field
                    if (
                            positionIsValid(input) // input coordinates are valid
                            && !isTooClose(input, field) // not too close to another ship
                            && p1.setShipPosition(status.getCount(), convertPosition(input)) // ship length is correct
                    ) {
                        status.add();
                    } else {
                        return;
                    }
                    if (!p1.enterShip(status.getCount())) { // there are no more ships to enter
                        startBattle();
                    }
                    break;
                case TURN_P1:
                    if (map.containsKey(input)) { // check if position is valid
                        p1.takeHit(map.get(input));
                    } else {
                        System.out.println("\nError! You entered the wrong coordinates! Try again!");
                        return;
                    }
                    if (p1.noMoreShips()) {
                        status = Status.OVER;
                    }
                    break;
                default:
                    return;
            }
        }

        private int[][] convertPosition(String input) {
            // convert coordinates to array with position, i.e., the {row, col} indexes of each occupied cell
            // this method should only be run with validated input coordinates!
            String[] coordinates = input.trim().split("\\s+");
            int[] start = map.get(coordinates[0]);
            int[] stop = map.get(coordinates[1]);
            int[][] position; // declare output variable
            if (start[0] == stop[0]) { // placed horizontally
                int[] range = generateRange(start[1], stop[1]);
                position = new int[range.length][2];
                for (int i = 0; i < range.length; i++) {
                    position[i][0] = start[0];
                    position[i][1] = range[i];
                }
            } else { // placed vertically
                int[] range = generateRange(start[0], stop[0]);
                position = new int[range.length][2];
                for (int i = 0; i < range.length; i++) {
                    position[i][0] = range[i];
                    position[i][1] = start[1];
                }
            }
            return position;
        }

        private int[] generateRange(int start, int stop) {
            // generates a sorted sequence of ints between start and stop (inclusive);
            int[] limits = {start, stop};
            Arrays.sort(limits);
            int size = limits[1] - limits[0] + 1;
            int[] range = new int[size];
            for (int i = 0; i < size; i++) {
                range[i] = limits[0] + i;
            }
            return range;
        }

        private boolean positionIsValid(String input){
            try {
                // check that input is in correct format
                String[] coordinates = input.trim().split("\\s+");
                if (
                        coordinates.length != 2
                        || !coordinates[0].matches("^[A-J][1-9]$|^[A-J]10$")
                        || !coordinates[1].matches("^[A-J][1-9]$|^[A-J]10$")
                ) {
                    throw new IllegalArgumentException();
                }

                // check that coordinates are a valid position, i.e. horizontal or vertical
                if (
                        Objects.equals(coordinates[0], coordinates[1]) // only one cell or
                        || ( coordinates[0].charAt(0) != coordinates[1].charAt(0) // different row and
                        && !Objects.equals(coordinates[0].substring(1), coordinates[1].substring(1))) // different col
                ) {
                    System.out.println("Error! Wrong ship location! Try again:");
                    return false;
                }
            } catch (RuntimeException e) {
                System.out.println("Error! Invalid coordinates! Try again:");
                return false;
            }
            return true;
        }

        private boolean isTooClose(String input, char[][] field) {
            // check that the new position is not next to any ship already set
            int[][] position = convertPosition(input);
            for (int[] cell : position) {
                int row = cell[0];
                int col = cell[1];
                int[][] neighbours = new int[8][2];
                neighbours[0] = new int[] {row - 1, col - 1};
                neighbours[1] = new int[] {row - 1, col};
                neighbours[2] = new int[] {row - 1, col + 1};
                neighbours[3] = new int[] {row, col + 1};
                neighbours[4] = new int[] {row + 1, col + 1};
                neighbours[5] = new int[] {row + 1, col };
                neighbours[6] = new int[] {row + 1, col - 1};
                neighbours[7] = new int[] {row, col - 1};
                for (int[] n : neighbours) {
                    try {
                        if (field[n[0]][n[1]] == 'O') {
                            System.out.println("Error! You placed it too close to another one. Try again:");
                            return true;
                        }
                    } catch (ArrayIndexOutOfBoundsException e) {
                        continue; // ignore exception
                    }
                }
            }
            return false;
        }

        private void startBattle() {
            System.out.println("\nThe game starts!");
            status = Status.TURN_P1;
            hitPrompt(p1);
        }

        private void hitPrompt(Player p) {
            p.printField(true);
            System.out.println("\nTake a shot!");
        }
    }


    class Player {
        private char[][] field = new char[10][10];
        private ArrayList<Ship> ships = new ArrayList<>();
        private HashMap<String, Ship> shipMap = new HashMap<>();

        public Player() {
            for (char[] row : field) {
                Arrays.fill(row, '~'); // fill field row with '~'
            }
            // Create ships
            ships.add(new Ship("Aircraft Carrier", 5));
            ships.add(new Ship("Battleship", 4));
            ships.add(new Ship("Submarine", 3));
            ships.add(new Ship("Cruiser", 3));
            ships.add(new Ship("Destroyer", 2));

            enterShip(0);
        }

        public char[][] getField() {
            return field;
        }

        public boolean noMoreShips() { return ships.size() == 0; }

        public void printField(boolean fog) {
            System.out.println("\n  1 2 3 4 5 6 7 8 9 10");
            char col = 'A';
            for (char[] row : field) {
                System.out.print(col + " ");
                col++;
                for (char cell : row) {
                    if (fog && cell == 'O') {
                        System.out.print("~ ");
                    } else {
                        System.out.print(cell + " ");
                    }
                }
                System.out.print("\n");
            }
        }

        public boolean enterShip(int index) {
            if (index < ships.size()) {
                printField(false);
                System.out.printf(
                        "\nEnter the coordinates of the %s (%d cells): \n",
                        ships.get(index).getType(),
                        ships.get(index).getSize()
                );
                return true;
            } else {
                printField(false);
                return false;
            }
        }

        public boolean setShipPosition(int index, int[][] coordinates) {
            if (coordinates.length == ships.get(index).getSize()) { // check if size is correct
                //ships[index].setPosition(coordinates);
                for (int[] cell : coordinates) { // change field
                    field[cell[0]][cell[1]] = 'O';
                    shipMap.put(Arrays.toString(cell), ships.get(index));
                }
                return true;
            } else {
                System.out.printf("Error! Wrong length of the %s! Try again:\n", ships.get(index).getType());
                return false;
            }
        }

        public void takeHit(int[] pos) {
            if (field[pos[0]][pos[1]] == 'O') {
                field[pos[0]][pos[1]] = 'X';
                // check if ship sank
                Ship ship = shipMap.get(Arrays.toString(pos));
                ship.takeHit();
                if (ship.isSunk()) {
                    ships.remove(ship);
                } else {
                    printField(true);
                    System.out.println("\nYou hit a ship! Try again:");
                    return;
                }
                if (ships.size() > 0) {
                    printField(true);
                    System.out.println("\nYou sank a ship! Specify a new target:");
                } else {
                    printField(true);
                    System.out.println("\nYou sank the last ship. You won. Congratulations!");
                }
            } else if (field[pos[0]][pos[1]] == 'M' || field[pos[0]][pos[1]] == 'X') {
                printField(true);
                System.out.println("\nYou shot there before! Try again:");
            } else {
                field[pos[0]][pos[1]] = 'M';
                printField(true);
                System.out.println("\nYou missed! Try again:");
            }
        }
    }

    class Ship {
        private String type;
        private int size;
        private int hits = 0;

        public Ship(String type, int size) {
            this.type = type;
            this.size = size;
        }

        public String getType() {
            return type;
        }

        public int getSize() {
            return size;
        }

        public void takeHit(){ hits++; }

        public boolean isSunk() { return hits == size; }
    }
  learner_created: true
- name: src/Main_stage2.txt
  visible: true
  text: |
    package battleship;

    import java.util.*;


    public class Main {
        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            Battle battle = new Battle();
            do  {
                battle.processInput(scanner.nextLine());
            } while (battle.getStatus() != Battle.Status.OVER);
        }
    }


    class Battle {
        private Player p1;
        private Player p2;
        private Status status;
        private final HashMap<String, int[]> map = new HashMap<>(); // coordinate : {row, col} indexes

        Battle() {
            char y = 'A';
            for (int row = 0; row < 10; row++, y++) {
                for (int col = 0; col < 10; col++) { // fill HashMap for coordinates
                    StringBuilder coordinate = new StringBuilder().append(y).append(col + 1);
                    map.put(coordinate.toString(), new int[] {row, col});
                }
            }
            status = Status.START_P1;
            p1 = new Player(); // start player 1
        }

        enum Status {
            START_P1(0),
            //START_P2(0),
            TURN_P1(0),
            //TURN_P2(0),
            OVER(0);

            private int n;

            Status(int n) { this.n = n; }

            void nextN() { this.n += 1; }

            int getN() { return this.n; }
        }

        public Status getStatus() { return status; }

        public void processInput(String input) {
            switch (status) {
                case START_P1:
                    char[][] field = p1.getField(); // get player's field
                    if (
                            positionIsValid(input) // input coordinates are valid
                            && !isTooClose(input, field) // not too close to another ship
                            && p1.setShipPosition(status.getN(), convertPosition(input)) // ship length is correct
                    ) {
                        status.nextN();
                    } else {
                        return;
                    }
                    if (!p1.enterShip(status.getN())) { // there are no more ships to enter
                        startBattle();
                    }
                    break;
                case TURN_P1:
                    if (map.containsKey(input)) { // check if position is valid
                        p1.takeShot(map.get(input));
                        status = Status.OVER;
                    } else {
                        System.out.println("\nError! You entered the wrong coordinates! Try again!");
                    }
                default:
                    return;
            }
        }

        private int[][] convertPosition(String input) {
            // convert coordinates to array with position, i.e., the {row, col} indexes of each occupied cell
            // this method should only be run with validated input coordinates!
            String[] coordinates = input.trim().split("\\s+");
            int[] start = map.get(coordinates[0]);
            int[] stop = map.get(coordinates[1]);
            int[][] position; // declare output variable
            if (start[0] == stop[0]) { // placed horizontally
                int[] range = generateRange(start[1], stop[1]);
                position = new int[range.length][2];
                for (int i = 0; i < range.length; i++) {
                    position[i][0] = start[0];
                    position[i][1] = range[i];
                }
            } else { // placed vertically
                int[] range = generateRange(start[0], stop[0]);
                position = new int[range.length][2];
                for (int i = 0; i < range.length; i++) {
                    position[i][0] = range[i];
                    position[i][1] = start[1];
                }
            }
            return position;
        }

        private int[] generateRange(int start, int stop) {
            // generates a sorted sequence of ints between start and stop (inclusive);
            int[] limits = {start, stop};
            Arrays.sort(limits);
            int size = limits[1] - limits[0] + 1;
            int[] range = new int[size];
            for (int i = 0; i < size; i++) {
                range[i] = limits[0] + i;
            }
            return range;
        }

        private boolean positionIsValid(String input){
            try {
                // check that input is in correct format
                String[] coordinates = input.trim().split("\\s+");
                if (
                        coordinates.length != 2
                        || !coordinates[0].matches("^[A-J][1-9]$|^[A-J]10$")
                        || !coordinates[1].matches("^[A-J][1-9]$|^[A-J]10$")
                ) {
                    throw new IllegalArgumentException();
                }

                // check that coordinates are a valid position, i.e. horizontal or vertical
                if (
                        Objects.equals(coordinates[0], coordinates[1]) // only one cell or
                        || ( coordinates[0].charAt(0) != coordinates[1].charAt(0) // different row and
                        && !Objects.equals(coordinates[0].substring(1), coordinates[1].substring(1))) // different col
                ) {
                    System.out.println("Error! Wrong ship location! Try again:");
                    return false;
                }
            } catch (RuntimeException e) {
                System.out.println("Error! Invalid coordinates! Try again:");
                return false;
            }
            return true;
        }

        private boolean isTooClose(String input, char[][] field) {
            // check that the new position is not next to any ship already set
            int[][] position = convertPosition(input);
            for (int[] cell : position) {
                int row = cell[0];
                int col = cell[1];
                int[][] neighbours = new int[8][2];
                neighbours[0] = new int[] {row - 1, col - 1};
                neighbours[1] = new int[] {row - 1, col};
                neighbours[2] = new int[] {row - 1, col + 1};
                neighbours[3] = new int[] {row, col + 1};
                neighbours[4] = new int[] {row + 1, col + 1};
                neighbours[5] = new int[] {row + 1, col };
                neighbours[6] = new int[] {row + 1, col - 1};
                neighbours[7] = new int[] {row, col - 1};
                for (int[] n : neighbours) {
                    try {
                        if (field[n[0]][n[1]] == 'O') {
                            System.out.println("Error! You placed it too close to another one. Try again:");
                            return true;
                        }
                    } catch (ArrayIndexOutOfBoundsException e) {
                        continue; // ignore exception
                    }
                }
            }
            return false;
        }

        private void startBattle() {
            System.out.println("\nThe game starts!");
            status = Status.TURN_P1;
            hitPrompt(p1);
        }

        private void hitPrompt(Player p) {
            p.printField();
            System.out.println("\nTake a shot!");
        }
    }


    class Player {
        private char[][] field = new char[10][10];
        private Ship[] ships = new Ship[5];

        public Player() {
            for (char[] row : field) {
                Arrays.fill(row, '~'); // fill field row with '~'
            }
            // Create ships
            ships[0] = new Ship("Aircraft Carrier", 5);
            ships[1] = new Ship("Battleship", 4);
            ships[2] = new Ship("Submarine", 3);
            ships[3] = new Ship("Cruiser", 3);
            ships[4] = new Ship("Destroyer", 2);

            enterShip(0);
        }

        public char[][] getField() {
            return field;
        }

        public void printField() {
            System.out.println("\n  1 2 3 4 5 6 7 8 9 10");
            char col = 'A';
            for (char[] row : field) {
                System.out.print(col + " ");
                col++;
                for (char cell : row) {
                    System.out.print(cell + " ");
                }
                System.out.print("\n");
            }
        }

        public boolean enterShip(int index) {
            if (index < ships.length) {
                printField();
                System.out.printf(
                        "\nEnter the coordinates of the %s (%d cells): \n",
                        ships[index].getType(),
                        ships[index].getSize()
                );
                return true;
            } else {
                printField();
                return false;
            }
        }

        public boolean setShipPosition(int index, int[][] coordinates) {
            if (coordinates.length == ships[index].getSize()) { // check if size is correct
                ships[index].setPosition(coordinates);
                for (int[] cell : coordinates) { // change field
                    field[cell[0]][cell[1]] = 'O';
                }
                return true;
            } else {
                System.out.printf("Error! Wrong length of the %s! Try again:\n", ships[index].getType());
                return false;
            }
        }

        public void takeShot(int[] pos) {
            if (field[pos[0]][pos[1]] == 'O') {
                field[pos[0]][pos[1]] = 'X';
                printField();
                System.out.println("\nYou hit a ship!");
            } else {
                field[pos[0]][pos[1]] = 'M';
                printField();
                System.out.println("\nYou missed!");
            }
        }
    }

    class Ship {
        private String type;
        private int size;
        private int[][] position = new int[size][2];
        private boolean sunk = false;

        public Ship(String type, int size) {
            this.type = type;
            this.size = size;
        }

        public String getType() {
            return type;
        }

        public int getSize() {
            return size;
        }

        //public int[][] getPosition() { return position; }

        //public boolean isSunk() { return sunk; }

        public void setPosition(int[][] position) {
            this.position = position;
        }

        //public void sink() { sunk = true; }
    }
  learner_created: true
- name: src/Main_stage3.txt
  visible: true
  text: |
    package battleship;

    import java.util.*;


    public class Main {
        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            Battle battle = new Battle();
            do  {
                battle.processInput(scanner.nextLine());
            } while (battle.getStatus() != Battle.Status.OVER);
        }
    }


    class Battle {
        private Player p1;
        private Player p2;
        private Status status;
        private final HashMap<String, int[]> map = new HashMap<>(); // coordinate : {row, col} indexes

        Battle() {
            char y = 'A';
            for (int row = 0; row < 10; row++, y++) {
                for (int col = 0; col < 10; col++) { // fill HashMap for coordinates
                    StringBuilder coordinate = new StringBuilder().append(y).append(col + 1);
                    map.put(coordinate.toString(), new int[] {row, col});
                }
            }
            status = Status.START_P1;
            p1 = new Player(); // start player 1
        }

        enum Status {
            START_P1(0),
            //START_P2(0),
            TURN_P1(0),
            //TURN_P2(0),
            OVER(0);

            private int n;

            Status(int n) { this.n = n; }

            void nextN() { this.n += 1; }

            int getN() { return this.n; }
        }

        public Status getStatus() { return status; }

        public void processInput(String input) {
            switch (status) {
                case START_P1:
                    char[][] field = p1.getField(); // get player's field
                    if (
                            positionIsValid(input) // input coordinates are valid
                            && !isTooClose(input, field) // not too close to another ship
                            && p1.setShipPosition(status.getN(), convertPosition(input)) // ship length is correct
                    ) {
                        status.nextN();
                    } else {
                        return;
                    }
                    if (!p1.enterShip(status.getN())) { // there are no more ships to enter
                        startBattle();
                    }
                    break;
                case TURN_P1:
                    if (map.containsKey(input)) { // check if position is valid
                        p1.takeShot(map.get(input));
                        p1.printField(false);
                        status = Status.OVER;
                    } else {
                        System.out.println("\nError! You entered the wrong coordinates! Try again!");
                    }
                    break;
                default:
                    return;
            }
        }

        private int[][] convertPosition(String input) {
            // convert coordinates to array with position, i.e., the {row, col} indexes of each occupied cell
            // this method should only be run with validated input coordinates!
            String[] coordinates = input.trim().split("\\s+");
            int[] start = map.get(coordinates[0]);
            int[] stop = map.get(coordinates[1]);
            int[][] position; // declare output variable
            if (start[0] == stop[0]) { // placed horizontally
                int[] range = generateRange(start[1], stop[1]);
                position = new int[range.length][2];
                for (int i = 0; i < range.length; i++) {
                    position[i][0] = start[0];
                    position[i][1] = range[i];
                }
            } else { // placed vertically
                int[] range = generateRange(start[0], stop[0]);
                position = new int[range.length][2];
                for (int i = 0; i < range.length; i++) {
                    position[i][0] = range[i];
                    position[i][1] = start[1];
                }
            }
            return position;
        }

        private int[] generateRange(int start, int stop) {
            // generates a sorted sequence of ints between start and stop (inclusive);
            int[] limits = {start, stop};
            Arrays.sort(limits);
            int size = limits[1] - limits[0] + 1;
            int[] range = new int[size];
            for (int i = 0; i < size; i++) {
                range[i] = limits[0] + i;
            }
            return range;
        }

        private boolean positionIsValid(String input){
            try {
                // check that input is in correct format
                String[] coordinates = input.trim().split("\\s+");
                if (
                        coordinates.length != 2
                        || !coordinates[0].matches("^[A-J][1-9]$|^[A-J]10$")
                        || !coordinates[1].matches("^[A-J][1-9]$|^[A-J]10$")
                ) {
                    throw new IllegalArgumentException();
                }

                // check that coordinates are a valid position, i.e. horizontal or vertical
                if (
                        Objects.equals(coordinates[0], coordinates[1]) // only one cell or
                        || ( coordinates[0].charAt(0) != coordinates[1].charAt(0) // different row and
                        && !Objects.equals(coordinates[0].substring(1), coordinates[1].substring(1))) // different col
                ) {
                    System.out.println("Error! Wrong ship location! Try again:");
                    return false;
                }
            } catch (RuntimeException e) {
                System.out.println("Error! Invalid coordinates! Try again:");
                return false;
            }
            return true;
        }

        private boolean isTooClose(String input, char[][] field) {
            // check that the new position is not next to any ship already set
            int[][] position = convertPosition(input);
            for (int[] cell : position) {
                int row = cell[0];
                int col = cell[1];
                int[][] neighbours = new int[8][2];
                neighbours[0] = new int[] {row - 1, col - 1};
                neighbours[1] = new int[] {row - 1, col};
                neighbours[2] = new int[] {row - 1, col + 1};
                neighbours[3] = new int[] {row, col + 1};
                neighbours[4] = new int[] {row + 1, col + 1};
                neighbours[5] = new int[] {row + 1, col };
                neighbours[6] = new int[] {row + 1, col - 1};
                neighbours[7] = new int[] {row, col - 1};
                for (int[] n : neighbours) {
                    try {
                        if (field[n[0]][n[1]] == 'O') {
                            System.out.println("Error! You placed it too close to another one. Try again:");
                            return true;
                        }
                    } catch (ArrayIndexOutOfBoundsException e) {
                        continue; // ignore exception
                    }
                }
            }
            return false;
        }

        private void startBattle() {
            System.out.println("\nThe game starts!");
            status = Status.TURN_P1;
            hitPrompt(p1);
        }

        private void hitPrompt(Player p) {
            p.printField(true);
            System.out.println("\nTake a shot!");
        }
    }


    class Player {
        private char[][] field = new char[10][10];
        private Ship[] ships = new Ship[5];

        public Player() {
            for (char[] row : field) {
                Arrays.fill(row, '~'); // fill field row with '~'
            }
            // Create ships
            ships[0] = new Ship("Aircraft Carrier", 5);
            ships[1] = new Ship("Battleship", 4);
            ships[2] = new Ship("Submarine", 3);
            ships[3] = new Ship("Cruiser", 3);
            ships[4] = new Ship("Destroyer", 2);

            enterShip(0);
        }

        public char[][] getField() {
            return field;
        }

        public void printField(boolean fog) {
            System.out.println("\n  1 2 3 4 5 6 7 8 9 10");
            char col = 'A';
            for (char[] row : field) {
                System.out.print(col + " ");
                col++;
                for (char cell : row) {
                    if (fog && cell == 'O') {
                        System.out.print("~ ");
                    } else {
                        System.out.print(cell + " ");
                    }
                }
                System.out.print("\n");
            }
        }

        public boolean enterShip(int index) {
            if (index < ships.length) {
                printField(false);
                System.out.printf(
                        "\nEnter the coordinates of the %s (%d cells): \n",
                        ships[index].getType(),
                        ships[index].getSize()
                );
                return true;
            } else {
                printField(false);
                return false;
            }
        }

        public boolean setShipPosition(int index, int[][] coordinates) {
            if (coordinates.length == ships[index].getSize()) { // check if size is correct
                ships[index].setPosition(coordinates);
                for (int[] cell : coordinates) { // change field
                    field[cell[0]][cell[1]] = 'O';
                }
                return true;
            } else {
                System.out.printf("Error! Wrong length of the %s! Try again:\n", ships[index].getType());
                return false;
            }
        }

        public void takeShot(int[] pos) {
            if (field[pos[0]][pos[1]] == 'O') {
                field[pos[0]][pos[1]] = 'X';
                printField(true);
                System.out.println("\nYou hit a ship!");
            } else {
                field[pos[0]][pos[1]] = 'M';
                printField(true);
                System.out.println("\nYou missed!");
            }
        }
    }

    class Ship {
        private String type;
        private int size;
        private int[][] position = new int[size][2];

        public Ship(String type, int size) {
            this.type = type;
            this.size = size;
        }

        public String getType() {
            return type;
        }

        public int getSize() {
            return size;
        }

        public void setPosition(int[][] position) {
            this.position = position;
        }
    }
  learner_created: true
- name: src/Main_stage1.txt
  visible: true
  text: |
    package battleship;

    import java.util.*;


    public class Main {
        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            battleship.Battle battle = new battleship.Battle();
            do  {
                battle.processInput(scanner.nextLine());
            } while (battle.getStatus() != battleship.Battle.Status.OVER);
        }
    }


    class Battle {
        private battleship.Player p1;
        private battleship.Player p2;
        private battleship.Battle.Status status;
        private final HashMap<String, int[]> map = new HashMap<>(); // coordinate : {row, col} indexes

        Battle() {
            char y = 'A';
            for (int row = 0; row < 10; row++, y++) {
                for (int col = 0; col < 10; col++) { // fill HashMap for coordinates
                    StringBuilder coordinate = new StringBuilder().append(y).append(col + 1);
                    map.put(coordinate.toString(), new int[] {row, col});
                }
            }
            status = battleship.Battle.Status.START_P1;
            p1 = new battleship.Player(); // start player 1
        }

        enum Status {
            START_P1(0),
            //START_P2(0),
            //TURN_P1(0),
            //TURN_P2(0),
            OVER(0);

            private int n;

            Status(int n) { this.n = n; }

            void nextN() { this.n += 1; }

            int getN() { return this.n; }
        }

        public battleship.Battle.Status getStatus() { return status; }

        public void processInput(String input) {
            switch (status) {
                case START_P1:
                    char[][] field = p1.getField(); // get player's field
                    if (
                            positionIsValid(input) // input coordinates are valid
                                    && !isTooClose(input, field) // not too close to another ship
                                    && p1.setShipPosition(status.getN(), convertPosition(input)) // ship length is correct
                    ) {
                        status.nextN();
                    } else {
                        return;
                    }
                    if (!p1.enterShip(status.getN())) { // there are no more ships to enter
                        status = battleship.Battle.Status.OVER;
                    }
                    break;
                default:
                    return;
            }
        }

        private int[][] convertPosition(String input) {
            // convert coordinates to array with position, i.e., the {row, col} indexes of each occupied cell
            // this method should only be run with validated input coordinates!
            String[] coordinates = input.trim().split("\\s+");
            int[] start = map.get(coordinates[0]);
            int[] stop = map.get(coordinates[1]);
            int[][] position; // declare output variable
            if (start[0] == stop[0]) { // placed horizontally
                int[] range = generateRange(start[1], stop[1]);
                position = new int[range.length][2];
                for (int i = 0; i < range.length; i++) {
                    position[i][0] = start[0];
                    position[i][1] = range[i];
                }
            } else { // placed vertically
                int[] range = generateRange(start[0], stop[0]);
                position = new int[range.length][2];
                for (int i = 0; i < range.length; i++) {
                    position[i][0] = range[i];
                    position[i][1] = start[1];
                }
            }
            return position;
        }

        private int[] generateRange(int start, int stop) {
            // generates a sorted sequence of ints between start and stop (inclusive);
            int[] limits = {start, stop};
            Arrays.sort(limits);
            int size = limits[1] - limits[0] + 1;
            int[] range = new int[size];
            for (int i = 0; i < size; i++) {
                range[i] = limits[0] + i;
            }
            return range;
        }

        private boolean positionIsValid(String input){
            try {
                // check that input is in correct format
                String[] coordinates = input.trim().split("\\s+");
                if (
                        coordinates.length != 2
                                || !coordinates[0].matches("^[A-J][1-9]$|^[A-J]10$")
                                || !coordinates[1].matches("^[A-J][1-9]$|^[A-J]10$")
                ) {
                    throw new IllegalArgumentException();
                }

                // check that coordinates are a valid position, i.e. horizontal or vertical
                if (
                        Objects.equals(coordinates[0], coordinates[1]) // only one cell or
                                || ( coordinates[0].charAt(0) != coordinates[1].charAt(0) // different row and
                                && !Objects.equals(coordinates[0].substring(1), coordinates[1].substring(1))) // different col
                ) {
                    System.out.println("Error! Wrong ship location! Try again:");
                    return false;
                }
            } catch (RuntimeException e) {
                System.out.println("Error! Invalid coordinates! Try again:");
                return false;
            }
            return true;
        }

        private boolean isTooClose(String input, char[][] field) {
            // check that the new position is not next to any ship already set
            int[][] position = convertPosition(input);
            for (int[] cell : position) {
                int row = cell[0];
                int col = cell[1];
                int[][] neighbours = new int[8][2];
                neighbours[0] = new int[] {row - 1, col - 1};
                neighbours[1] = new int[] {row - 1, col};
                neighbours[2] = new int[] {row - 1, col + 1};
                neighbours[3] = new int[] {row, col + 1};
                neighbours[4] = new int[] {row + 1, col + 1};
                neighbours[5] = new int[] {row + 1, col };
                neighbours[6] = new int[] {row + 1, col - 1};
                neighbours[7] = new int[] {row, col - 1};
                for (int[] n : neighbours) {
                    try {
                        if (field[n[0]][n[1]] == 'O') {
                            System.out.println("Error! You placed it too close to another one. Try again:");
                            return true;
                        }
                    } catch (ArrayIndexOutOfBoundsException e) {
                        continue; // ignore exception
                    }
                }
            }
            return false;
        }
    }


    class Player {
        private char[][] field = new char[10][10];
        private battleship.Ship[] ships = new battleship.Ship[5];

        public Player() {
            for (char[] row : field) {
                Arrays.fill(row, '~'); // fill field row with '~'
            }
            // Create ships
            ships[0] = new battleship.Ship("Aircraft Carrier", 5);
            ships[1] = new battleship.Ship("Battleship", 4);
            ships[2] = new battleship.Ship("Submarine", 3);
            ships[3] = new battleship.Ship("Cruiser", 3);
            ships[4] = new battleship.Ship("Destroyer", 2);

            enterShip(0);
        }

        public char[][] getField() {
            return field;
        }

        public void printField() {
            System.out.println("\n  1 2 3 4 5 6 7 8 9 10");
            char col = 'A';
            for (char[] row : field) {
                System.out.print(col + " ");
                col++;
                for (char cell : row) {
                    System.out.print(cell + " ");
                }
                System.out.print("\n");
            }
        }

        public boolean enterShip(int index) {
            if (index < ships.length) {
                printField();
                System.out.printf(
                        "\nEnter the coordinates of the %s (%d cells): \n",
                        ships[index].getType(),
                        ships[index].getSize()
                );
                return true;
            } else {
                printField();
                return false;
            }
        }

        public boolean setShipPosition(int index, int[][] coordinates) {
            if (coordinates.length == ships[index].getSize()) { // check if size is correct
                ships[index].setPosition(coordinates);
                for (int[] cell : coordinates) { // change field
                    field[cell[0]][cell[1]] = 'O';
                }
                return true;
            } else {
                System.out.printf("Error! Wrong length of the %s! Try again:\n", ships[index].getType());
                return false;
            }
        }
    }

    class Ship {
        private String type;
        private int size;
        private int[][] position = new int[size][2];
        private boolean sunk = false;

        public Ship(String type, int size) {
            this.type = type;
            this.size = size;
        }

        public String getType() {
            return type;
        }

        public int getSize() {
            return size;
        }

        //public int[][] getPosition() { return position; }

        //public boolean isSunk() { return sunk; }

        public void setPosition(int[][] position) {
            this.position = position;
        }

        //public void sink() { sunk = true; }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/125/stages/667/implement#comment
status: Unchecked
record: -1
